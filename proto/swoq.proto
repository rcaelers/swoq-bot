syntax = "proto3";

package Swoq.Interface;

service GameService {
    rpc Start(StartRequest) returns (StartResponse);
    rpc Act(ActRequest) returns (ActResponse);
}

message StartRequest {
    string userId = 1;
    string userName = 2;
    optional int32 level = 3;
    optional int32 seed = 4;
}

message StartResponse {
    StartResult result = 1;
    optional string gameId = 2;
    optional int32 mapWidth = 3;
    optional int32 mapHeight = 4;
    optional int32 visibilityRange = 5;
    optional State state = 6;
    optional int32 seed = 7;
}

message ActRequest {
    string gameId = 1;
    optional DirectedAction action = 2;
    // Level 12 and higher:
    optional DirectedAction action2 = 3;
}

message ActResponse {
    ActResult result = 1;
    optional State state = 2;
}

enum StartResult {
    START_RESULT_OK = 0;
    START_RESULT_INTERNAL_ERROR = 1;
    START_RESULT_UNKNOWN_USER = 2;
    START_RESULT_INVALID_LEVEL = 3;
    START_RESULT_QUEST_QUEUED = 4;
    START_RESULT_NOT_ALLOWED = 5;
}

enum ActResult {
    ACT_RESULT_OK = 0;
    ACT_RESULT_INTERNAL_ERROR = 1;
    ACT_RESULT_UNKNOWN_GAME_ID = 2;
    ACT_RESULT_MOVE_NOT_ALLOWED = 3;
    ACT_RESULT_UNKNOWN_ACTION = 4;
    ACT_RESULT_GAME_FINISHED = 5;
    // Level 2 and higher:
    ACT_RESULT_USE_NOT_ALLOWED = 6;
    ACT_RESULT_INVENTORY_FULL = 7;
    ACT_RESULT_INVENTORY_EMPTY = 8;
    // Level 8 and higher:
    ACT_RESULT_NO_SWORD = 9;
    // Level 12 and higher:
    ACT_RESULT_PLAYER_NOT_PRESENT = 10;
    ACT_RESULT_PLAYER2_NOT_PRESENT = 11;
}

message State {
    int32 tick = 1;
    int32 level = 2;
    GameStatus status = 3;
    optional PlayerState playerState = 4;
    // Level 12 and higher:
    optional PlayerState player2State = 5;
}

enum DirectedAction {
    DIRECTED_ACTION_NONE = 0;
    DIRECTED_ACTION_MOVE_NORTH = 1;
    DIRECTED_ACTION_MOVE_EAST = 2;
    DIRECTED_ACTION_MOVE_SOUTH = 3;
    DIRECTED_ACTION_MOVE_WEST = 4;
    // Level 2 and higher:
    DIRECTED_ACTION_USE_NORTH = 5;
    DIRECTED_ACTION_USE_EAST = 6;
    DIRECTED_ACTION_USE_SOUTH = 7;
    DIRECTED_ACTION_USE_WEST = 8;
}

enum GameStatus {
    GAME_STATUS_ACTIVE = 0;
    GAME_STATUS_FINISHED_SUCCESS = 1;
    GAME_STATUS_FINISHED_TIMEOUT = 2;
    GAME_STATUS_FINISHED_NO_PROGRESS = 3;
    GAME_STATUS_FINISHED_PLAYER_DIED = 4;
    GAME_STATUS_FINISHED_CANCELED = 5;
    // Level 12 and higher:
    GAME_STATUS_FINISHED_PLAYER2_DIED = 6;
}

message PlayerState {
    Position position = 1;
    repeated Tile surroundings = 2;
    // Level 2 and higher:
    optional Inventory inventory = 3;
    // Level 8 and higher:
    optional int32 health = 4;
    // Level 10 and higher:
    optional bool hasSword = 5;
}

message Position {
    int32 x = 1;
    int32 y = 2;
}

enum Tile {
    TILE_UNKNOWN = 0;
    TILE_EMPTY = 1;
    TILE_PLAYER = 2;
    TILE_WALL = 3;
    TILE_EXIT = 4;
    // Level 2 and higher:
    TILE_DOOR_RED = 5;
    TILE_KEY_RED = 6;
    TILE_DOOR_GREEN = 7;
    TILE_KEY_GREEN = 8;
    TILE_DOOR_BLUE = 9;
    TILE_KEY_BLUE = 10;
    // Level 6 and higher:
    TILE_BOULDER = 11;
    // Level 7 and higher:
    TILE_PRESSURE_PLATE_RED = 12;
    TILE_PRESSURE_PLATE_GREEN = 13;
    TILE_PRESSURE_PLATE_BLUE = 14;
    // Level 8 and higher:
    TILE_ENEMY = 15;
    // Level 10 and higher:
    TILE_SWORD = 16;
    TILE_HEALTH = 17;
    // Level 22 and higher:
    TILE_BOSS = 18;
    TILE_TREASURE = 19;
}

enum Inventory {
    // Level 2 and higher:
    INVENTORY_NONE = 0;
    INVENTORY_KEY_RED = 1;
    INVENTORY_KEY_GREEN = 2;
    INVENTORY_KEY_BLUE = 3;
    // Level 6 and higher:
    INVENTORY_BOULDER = 4;
    // Level 22 and higher:
    INVENTORY_TREASURE = 5;
}
